cmake_minimum_required(VERSION 3.16)
project(VideoAnalyzer)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(MSVC)
    add_compile_options(/W4)
    add_compile_options(/utf-8)
else()
    add_compile_options(-Wall -Wextra -pedantic)
endif()

find_package(OpenCV REQUIRED)
find_package(Threads REQUIRED)

# Optional: CUDA support
option(USE_CUDA "Enable CUDA support for GPU inference" ON)
if(USE_CUDA)
    find_package(CUDAToolkit QUIET)
    if(CUDAToolkit_FOUND)
        add_definitions(-DUSE_CUDA)
        message(STATUS "CUDA found: ${CUDAToolkit_VERSION} - GPU inference enabled")
    else()
        message(WARNING "CUDA not found - GPU inference disabled")
    endif()
endif()

# Optional: JSONCPP
find_path(JSONCPP_INCLUDE_DIR NAMES json/json.h PATHS /usr/local/include /usr/include)
find_library(JSONCPP_LIBRARY NAMES jsoncpp PATHS /usr/local/lib /usr/lib)

# ONNX Runtime (via ONNXRUNTIME_ROOT)
find_path(ONNXRUNTIME_INCLUDE_DIR NAMES onnxruntime_cxx_api.h PATHS ${ONNXRUNTIME_ROOT}/include /usr/local/include/onnxruntime /usr/include/onnxruntime)
find_library(ONNXRUNTIME_LIB NAMES onnxruntime PATHS ${ONNXRUNTIME_ROOT}/lib /usr/local/lib /usr/lib)

# Optional vcpkg-installed dependencies
set(VCPKG_ROOT_DIR "$ENV{VCPKG_ROOT}")
if (NOT VCPKG_ROOT_DIR)
    set(VCPKG_ROOT_DIR "${CMAKE_SOURCE_DIR}/../vcpkg")
endif()
if (NOT EXISTS "${VCPKG_ROOT_DIR}")
    set(VCPKG_ROOT_DIR "D:/Projects/vcpkg")
endif()
set(VCPKG_LIB_DIR "${VCPKG_ROOT_DIR}/installed/x64-windows/lib")
find_library(IXWEBSOCKET_LIB NAMES ixwebsocket PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)
find_library(DATA_CHANNEL_LIB NAMES datachannel PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)
find_library(JUICE_LIB NAMES juice PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)
find_library(MBEDTLS_LIB NAMES mbedtls PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)
find_library(MBEDCRYPTO_LIB NAMES mbedcrypto PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)
find_library(MBEDX509_LIB NAMES mbedx509 PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)
find_library(ZLIB_LIB NAMES zlib PATHS ${VCPKG_LIB_DIR} NO_DEFAULT_PATH)

include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(include)
if(JSONCPP_INCLUDE_DIR)
    include_directories(${JSONCPP_INCLUDE_DIR})
endif()
if(ONNXRUNTIME_INCLUDE_DIR)
    include_directories(${ONNXRUNTIME_INCLUDE_DIR})
    add_definitions(-DUSE_ONNXRUNTIME)
endif()

file(GLOB_RECURSE SOURCES "src/*.cpp")
file(GLOB_RECURSE HEADERS "include/*.h")

add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

target_compile_definitions(${PROJECT_NAME} PRIVATE IXWEBSOCKET_HEADER_ONLY IXWEBSOCKET_USE_TLS=0)

target_link_libraries(${PROJECT_NAME}
    ${OpenCV_LIBS}
    Threads::Threads)
if(JSONCPP_LIBRARY)
    target_link_libraries(${PROJECT_NAME} ${JSONCPP_LIBRARY})
endif()
if(ONNXRUNTIME_LIB)
    target_link_libraries(${PROJECT_NAME} ${ONNXRUNTIME_LIB})
endif()
if(IXWEBSOCKET_LIB)
    target_link_libraries(${PROJECT_NAME} ${IXWEBSOCKET_LIB})
endif()
if(DATA_CHANNEL_LIB)
    target_link_libraries(${PROJECT_NAME} ${DATA_CHANNEL_LIB})
endif()
if(JUICE_LIB)
    target_link_libraries(${PROJECT_NAME} ${JUICE_LIB})
endif()
if(MBEDTLS_LIB)
    target_link_libraries(${PROJECT_NAME} ${MBEDTLS_LIB})
endif()
if(MBEDCRYPTO_LIB)
    target_link_libraries(${PROJECT_NAME} ${MBEDCRYPTO_LIB})
endif()
if(MBEDX509_LIB)
    target_link_libraries(${PROJECT_NAME} ${MBEDX509_LIB})
endif()
if (WIN32)
    target_link_libraries(${PROJECT_NAME} ws2_32 iphlpapi psapi crypt32 bcrypt)
endif()
if(ZLIB_LIB)
    target_link_libraries(${PROJECT_NAME} ${ZLIB_LIB})
endif()

set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
